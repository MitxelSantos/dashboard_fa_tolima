#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Sistema Coordinador Maestro - ACTUALIZADO
Orquesta actualizaciones completas del Sistema Epidemiol√≥gico Tolima
Usa los scripts adaptados con configuraci√≥n centralizada
"""

import subprocess
import os
import sys
from datetime import datetime
import pandas as pd
from sqlalchemy import create_engine, text
import warnings

# Importar configuraci√≥n centralizada
from config import (
    DATABASE_URL, FileConfig, validar_configuracion,
    cargar_codigos_divipola_desde_gpkg
)

warnings.filterwarnings('ignore')

class SistemaCoordinadorTolima:
    def __init__(self):
        self.inicio = datetime.now()
        self.logs = []
        self.engine = None
        
    def log(self, mensaje, tipo="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {tipo}: {mensaje}"
        self.logs.append(log_entry)
        print(log_entry)
    
    def verificar_docker(self):
        """Verifica que Docker PostgreSQL est√© corriendo"""
        self.log("üê≥ Verificando Docker PostgreSQL...")
        
        try:
            # Verificar si docker-compose est√° disponible
            result = subprocess.run(["docker-compose", "--version"], 
                                  capture_output=True, text=True, check=True)
            self.log(f"Docker Compose: {result.stdout.strip()}")
            
            # Levantar servicios si no est√°n corriendo
            self.log("Iniciando servicios Docker...")
            subprocess.run(["docker-compose", "up", "-d"], check=True)
            
            # Esperar un momento para que PostgreSQL inicie
            import time
            time.sleep(5)
            
            # Verificar conexi√≥n PostgreSQL
            self.engine = create_engine(DATABASE_URL)
            with self.engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            
            self.log("‚úÖ PostgreSQL funcionando correctamente")
            return True
            
        except subprocess.CalledProcessError as e:
            self.log(f"‚ùå Error Docker: {e}", "ERROR")
            return False
        except Exception as e:
            self.log(f"‚ùå Error conexi√≥n PostgreSQL: {e}", "ERROR")
            return False
    
    def verificar_configuracion_sistema(self):
        """Verifica configuraci√≥n del sistema"""
        self.log("‚öôÔ∏è Verificando configuraci√≥n del sistema...")
        
        try:
            # Ejecutar validaci√≥n de configuraci√≥n
            validar_configuracion()
            
            # Cargar c√≥digos DIVIPOLA
            codigos = cargar_codigos_divipola_desde_gpkg(forzar_recarga=True)
            if codigos:
                municipios = len(codigos['municipios'])
                veredas = len(codigos['veredas'])
                self.log(f"‚úÖ C√≥digos DIVIPOLA: {municipios} municipios, {veredas} veredas")
            else:
                self.log("‚ö†Ô∏è No se pudieron cargar c√≥digos DIVIPOLA", "WARNING")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå Error verificando configuraci√≥n: {e}", "ERROR")
            return False
    
    def verificar_archivos_entrada(self):
        """Verifica que los archivos de entrada existan"""
        self.log("üìÇ Verificando archivos de entrada...")
        
        archivos = {
            "Unidades Territoriales": FileConfig.TERRITORIOS_FILE,
            "Poblaci√≥n SISBEN": FileConfig.POBLACION_FILE, 
            "Vacunaci√≥n PAIweb": FileConfig.PAIWEB_FILE,
            "Casos Fiebre Amarilla": FileConfig.CASOS_FILE,
            "Epizootias": FileConfig.EPIZOOTIAS_FILE
        }
        
        archivos_faltantes = []
        archivos_encontrados = []
        
        for nombre, ruta in archivos.items():
            if ruta.exists():
                tama√±o = ruta.stat().st_size / (1024*1024)  # MB
                self.log(f"‚úÖ {nombre}: {ruta} ({tama√±o:.1f} MB)")
                archivos_encontrados.append(nombre)
            else:
                self.log(f"‚ùå {nombre}: {ruta} NO ENCONTRADO", "ERROR")
                archivos_faltantes.append(nombre)
        
        if archivos_faltantes:
            self.log(f"‚ö†Ô∏è Archivos faltantes: {', '.join(archivos_faltantes)}", "WARNING")
            return False, archivos_encontrados, archivos_faltantes
        
        return True, archivos_encontrados, []
    
    def cargar_unidades_territoriales(self):
        """Carga unidades territoriales usando script adaptado"""
        self.log("üó∫Ô∏è Cargando unidades territoriales...")
        
        try:
            from cargar_geodata import cargar_unidades_territoriales_postgresql
            resultado = cargar_unidades_territoriales_postgresql(str(FileConfig.TERRITORIOS_FILE))
            
            if resultado:
                self.log("‚úÖ Unidades territoriales cargadas exitosamente")
                return True
            else:
                self.log("‚ùå Error cargando unidades territoriales", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Error cr√≠tico unidades territoriales: {e}", "ERROR")
            return False
    
    def cargar_poblacion(self):
        """Carga poblaci√≥n SISBEN usando script adaptado integrado"""
        self.log("üë• Cargando poblaci√≥n SISBEN...")
        
        try:
            from cargar_poblacion import procesar_poblacion_completo
            resultado = procesar_poblacion_completo(str(FileConfig.POBLACION_FILE))
            
            if resultado:
                self.log("‚úÖ Poblaci√≥n cargada exitosamente")
                return True
            else:
                self.log("‚ùå Error cargando poblaci√≥n", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Error cr√≠tico poblaci√≥n: {e}", "ERROR")
            return False
    
    def cargar_vacunacion(self):
        """Carga datos de vacunaci√≥n usando script adaptado"""
        self.log("üíâ Cargando vacunaci√≥n PAIweb...")
        
        try:
            from cargar_vacunacion import procesar_vacunacion_completo
            resultado = procesar_vacunacion_completo(str(FileConfig.PAIWEB_FILE))
            
            if resultado:
                self.log("‚úÖ Vacunaci√≥n cargada exitosamente")
                return True
            else:
                self.log("‚ùå Error cargando vacunaci√≥n", "ERROR") 
                return False
                
        except Exception as e:
            self.log(f"‚ùå Error cr√≠tico vacunaci√≥n: {e}", "ERROR")
            return False
    
    def cargar_casos(self):
        """Carga casos de fiebre amarilla usando script adaptado"""
        self.log("ü¶† Cargando casos fiebre amarilla...")
        
        try:
            from cargar_casos import procesar_casos_completo
            resultado = procesar_casos_completo(str(FileConfig.CASOS_FILE))
            
            if resultado:
                self.log("‚úÖ Casos cargados exitosamente")
                return True
            else:
                self.log("‚ùå Error cargando casos", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Error cr√≠tico casos: {e}", "ERROR")
            return False
    
    def cargar_epizootias(self):
        """Carga epizootias usando script adaptado"""
        self.log("üêí Cargando epizootias...")
        
        try:
            from cargar_epizootias import procesar_epizootias_completo
            resultado = procesar_epizootias_completo(str(FileConfig.EPIZOOTIAS_FILE))
            
            if resultado:
                self.log("‚úÖ Epizootias cargadas exitosamente")
                return True
            else:
                self.log("‚ùå Error cargando epizootias", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Error cr√≠tico epizootias: {e}", "ERROR")
            return False
    
    def verificar_integridad_sistema(self):
        """Verifica integridad del sistema completo"""
        self.log("üîç Verificando integridad del sistema...")
        
        try:
            verificaciones = {
                "unidades_territoriales": "SELECT COUNT(*) FROM unidades_territoriales",
                "poblacion": "SELECT COUNT(*) FROM poblacion", 
                "vacunacion": "SELECT COUNT(*) FROM vacunacion_fiebre_amarilla",
                "casos": "SELECT COUNT(*) FROM casos_fiebre_amarilla",
                "epizootias": "SELECT COUNT(*) FROM epizootias"
            }
            
            with self.engine.connect() as conn:
                self.log("üìä Resumen de datos cargados:")
                totales = {}
                
                for tabla, query in verificaciones.items():
                    try:
                        total = conn.execute(text(query)).scalar()
                        totales[tabla] = total
                        self.log(f"   {tabla.replace('_', ' ').title()}: {total:,} registros")
                    except Exception as e:
                        totales[tabla] = 0
                        self.log(f"   {tabla.replace('_', ' ').title()}: ERROR - {e}")
                
                # Verificar vistas cr√≠ticas
                vistas_criticas = [
                    "v_coberturas_dashboard",
                    "v_mapa_coberturas", 
                    "v_indicadores_clave"
                ]
                
                for vista in vistas_criticas:
                    try:
                        test_vista = conn.execute(text(f"SELECT COUNT(*) FROM {vista}")).scalar()
                        self.log(f"   Vista {vista}: {test_vista:,} registros")
                    except Exception as e:
                        self.log(f"   Vista {vista}: ERROR - {e}")
                
                return totales
                
        except Exception as e:
            self.log(f"‚ùå Error verificaci√≥n integridad: {e}", "ERROR")
            return {}
    
    def generar_reporte_final(self, totales, cargas_exitosas, total_cargas):
        """Genera reporte final de la actualizaci√≥n"""
        duracion = datetime.now() - self.inicio
        
        print(f"\n{'='*80}")
        print(" REPORTE FINAL ACTUALIZACI√ìN SISTEMA EPIDEMIOL√ìGICO TOLIMA ".center(80))
        print("=" * 80)
        
        print(f"üïê Inicio: {self.inicio.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üïê Fin: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚è±Ô∏è Duraci√≥n total: {duracion.total_seconds():.1f} segundos")
        
        # Estado general
        if cargas_exitosas == total_cargas:
            print(f"üéâ ESTADO: ACTUALIZACI√ìN EXITOSA ({cargas_exitosas}/{total_cargas})")
        else:
            print(f"‚ö†Ô∏è ESTADO: ACTUALIZACI√ìN PARCIAL ({cargas_exitosas}/{total_cargas})")
        
        print(f"\nüìä DATOS CARGADOS:")
        total_registros = 0
        for tabla, total in totales.items():
            print(f"   {tabla.replace('_', ' ').title()}: {total:,} registros")
            total_registros += total
        
        print(f"   üìà TOTAL GENERAL: {total_registros:,} registros")
        
        # Calcular estad√≠sticas epidemiol√≥gicas si hay datos
        if totales.get('poblacion', 0) > 0 and totales.get('vacunacion', 0) > 0:
            try:
                with self.engine.connect() as conn:
                    # Poblaci√≥n total
                    poblacion_total = conn.execute(text(
                        "SELECT SUM(poblacion_total) FROM poblacion"
                    )).scalar()
                    
                    # Cobertura aproximada
                    vacunados_total = totales.get('vacunacion', 0)
                    cobertura_aprox = (vacunados_total / poblacion_total * 100) if poblacion_total > 0 else 0
                    
                    print(f"\nüìä INDICADORES EPIDEMIOL√ìGICOS:")
                    print(f"   üë• Poblaci√≥n total Tolima: {poblacion_total:,} habitantes")
                    print(f"   üíâ Total vacunados: {vacunados_total:,}")
                    print(f"   üìà Cobertura aproximada: {cobertura_aprox:.1f}%")
                    
                    if totales.get('casos', 0) > 0:
                        print(f"   ü¶† Casos registrados: {totales['casos']:,}")
                        
                    if totales.get('epizootias', 0) > 0:
                        print(f"   üêí Epizootias registradas: {totales['epizootias']:,}")
            except:
                pass
        
        print(f"\nüéØ SISTEMA LISTO PARA:")
        print("   1. üìä Dashboard epidemiol√≥gico en tiempo real")
        print("   2. üó∫Ô∏è An√°lisis geoespaciales avanzados")
        print("   3. üìà C√°lculo de coberturas por municipio/grupo etario")
        print("   4. üö® Generaci√≥n de alertas epidemiol√≥gicas")
        print("   5. üìã Reportes automatizados")
        
        print(f"\nüîó HERRAMIENTAS DISPONIBLES:")
        print("   ‚Ä¢ DBeaver: An√°lisis de datos SQL")
        print("   ‚Ä¢ pgAdmin: http://localhost:8080")
        print("   ‚Ä¢ Scripts de monitoreo en /scripts/")
        
        # Guardar log completo
        self.guardar_log_completo()
    
    def guardar_log_completo(self):
        """Guarda log completo de la actualizaci√≥n"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = FileConfig.LOGS_DIR / f"actualizacion_sistema_{timestamp}.txt"
        
        try:
            FileConfig.create_directories()
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write("SISTEMA EPIDEMIOL√ìGICO TOLIMA - LOG ACTUALIZACI√ìN\n")
                f.write("=" * 60 + "\n\n")
                f.write(f"Fecha: {self.inicio.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"Duraci√≥n: {(datetime.now() - self.inicio).total_seconds():.1f}s\n\n")
                
                for log_entry in self.logs:
                    f.write(log_entry + "\n")
            
            self.log(f"üìù Log completo guardado: {log_file}")
        except Exception as e:
            self.log(f"‚ö†Ô∏è No se pudo guardar log: {e}")
    
    def actualizar_sistema_completo(self, modo="completo"):
        """
        Actualizaci√≥n completa del sistema epidemiol√≥gico
        Modos: completo, solo_datos, solo_verificacion, rapido
        """
        self.log("üöÄ INICIANDO ACTUALIZACI√ìN SISTEMA EPIDEMIOL√ìGICO TOLIMA")
        self.log("=" * 70)
        self.log(f"Modo: {modo.upper()}")
        
        # 1. Verificar Docker y configuraci√≥n
        if not self.verificar_docker():
            self.log("‚ùå No se pudo conectar a PostgreSQL. Abortando.", "ERROR")
            return False
        
        if not self.verificar_configuracion_sistema():
            self.log("‚ùå Error en configuraci√≥n del sistema. Abortando.", "ERROR")
            return False
        
        # 2. Verificar archivos
        archivos_ok, encontrados, faltantes = self.verificar_archivos_entrada()
        
        if modo == "solo_verificacion":
            self.log("‚úÖ Modo verificaci√≥n completado")
            return True
        
        if not archivos_ok and modo == "completo":
            respuesta = input("‚ö†Ô∏è Faltan archivos. ¬øContinuar con los disponibles? (y/N): ")
            if respuesta.lower() not in ['y', 'yes', 'si', 's√≠']:
                self.log("‚ùå Actualizaci√≥n cancelada por usuario", "WARNING")
                return False
        
        # 3. Cargas de datos (en orden de dependencias)
        cargas_exitosas = 0
        total_cargas = 0
        
        # Definir orden de carga por dependencias
        cargas_programadas = []
        
        if "Unidades Territoriales" in encontrados:
            cargas_programadas.append(("Unidades Territoriales", self.cargar_unidades_territoriales))
        
        if "Poblaci√≥n SISBEN" in encontrados:
            cargas_programadas.append(("Poblaci√≥n SISBEN", self.cargar_poblacion))
        
        if "Vacunaci√≥n PAIweb" in encontrados:
            cargas_programadas.append(("Vacunaci√≥n PAIweb", self.cargar_vacunacion))
        
        if "Casos Fiebre Amarilla" in encontrados:
            cargas_programadas.append(("Casos Fiebre Amarilla", self.cargar_casos))
        
        if "Epizootias" in encontrados:
            cargas_programadas.append(("Epizootias", self.cargar_epizootias))
        
        # Ejecutar cargas
        total_cargas = len(cargas_programadas)
        self.log(f"üìã Cargas programadas: {total_cargas}")
        
        for i, (nombre, funcion_carga) in enumerate(cargas_programadas, 1):
            self.log(f"üìä Carga {i}/{total_cargas}: {nombre}")
            
            if funcion_carga():
                cargas_exitosas += 1
                self.log(f"‚úÖ {nombre} completado exitosamente")
            else:
                self.log(f"‚ùå Error en {nombre}", "ERROR")
                
                if modo == "completo":
                    continuar = input(f"‚ö†Ô∏è ¬øContinuar con el resto de cargas? (y/N): ")
                    if continuar.lower() not in ['y', 'yes', 'si', 's√≠']:
                        break
        
        # 4. Verificaci√≥n final de integridad
        totales = self.verificar_integridad_sistema()
        
        # 5. Reporte final completo
        self.generar_reporte_final(totales, cargas_exitosas, total_cargas)
        
        # 6. Resultado final
        if cargas_exitosas == total_cargas:
            self.log("üéâ ¬°ACTUALIZACI√ìN COMPLETADA EXITOSAMENTE!")
            return True
        else:
            self.log(f"‚ö†Ô∏è Actualizaci√≥n parcial: {cargas_exitosas}/{total_cargas} exitosas", "WARNING")
            return cargas_exitosas > 0  # True si al menos una carga fue exitosa

def menu_interactivo():
    """Men√∫ interactivo para el sistema coordinador"""
    print("üéõÔ∏è SISTEMA COORDINADOR EPIDEMIOL√ìGICO TOLIMA - V2.0")
    print("=" * 60)
    print("1. üöÄ Actualizaci√≥n completa del sistema")
    print("2. üîç Solo verificar archivos y conexiones")
    print("3. ‚ö° Actualizaci√≥n r√°pida (sin confirmaciones)")
    print("4. üó∫Ô∏è Solo cargar unidades territoriales")
    print("5. üë• Solo cargar poblaci√≥n")
    print("6. üíâ Solo cargar vacunaci√≥n")
    print("7. ü¶† Solo cargar casos")
    print("8. üêí Solo cargar epizootias")
    print("9. üîß Verificar integridad sistema")
    print("0. üëã Salir")
    
    while True:
        try:
            opcion = input("\nüî¢ Selecciona opci√≥n: ")
            
            coordinador = SistemaCoordinadorTolima()
            
            if opcion == "1":
                coordinador.actualizar_sistema_completo("completo")
                break
            elif opcion == "2":
                coordinador.actualizar_sistema_completo("solo_verificacion")
                break
            elif opcion == "3":
                coordinador.actualizar_sistema_completo("rapido")
                break
            elif opcion == "4":
                if coordinador.verificar_docker() and coordinador.verificar_configuracion_sistema():
                    coordinador.cargar_unidades_territoriales()
                break
            elif opcion == "5":
                if coordinador.verificar_docker() and coordinador.verificar_configuracion_sistema():
                    coordinador.cargar_poblacion()
                break
            elif opcion == "6":
                if coordinador.verificar_docker() and coordinador.verificar_configuracion_sistema():
                    coordinador.cargar_vacunacion()
                break
            elif opcion == "7":
                if coordinador.verificar_docker() and coordinador.verificar_configuracion_sistema():
                    coordinador.cargar_casos()
                break
            elif opcion == "8":
                if coordinador.verificar_docker() and coordinador.verificar_configuracion_sistema():
                    coordinador.cargar_epizootias()
                break
            elif opcion == "9":
                if coordinador.verificar_docker():
                    coordinador.verificar_integridad_sistema()
                break
            elif opcion == "0":
                print("üëã ¬°Hasta luego!")
                break
            else:
                print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Saliendo...")
            break
        except Exception as e:
            print(f"‚ùå Error: {e}")

# ================================
# FUNCI√ìN PRINCIPAL
# ================================
if __name__ == "__main__":
    print("üéÆ SISTEMA COORDINADOR TOLIMA - V2.0")
    print("=" * 45)
    
    # Verificar argumentos de l√≠nea de comandos
    if len(sys.argv) > 1:
        coordinador = SistemaCoordinadorTolima()
        
        if sys.argv[1] == "--completo":
            coordinador.actualizar_sistema_completo("completo")
        elif sys.argv[1] == "--rapido":
            coordinador.actualizar_sistema_completo("rapido")
        elif sys.argv[1] == "--verificar":
            coordinador.actualizar_sistema_completo("solo_verificacion")
        elif sys.argv[1] == "--menu":
            menu_interactivo()
        else:
            print("‚ùå Argumento inv√°lido")
            print("Opciones: --completo, --rapido, --verificar, --menu")
    else:
        # Men√∫ interactivo por defecto
        menu_interactivo()