#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
setup_sistema.py - Verificador/Instalador Sistema Epidemiol√≥gico Tolima V2.0
CORREGIDO: Sistema de verificaci√≥n inteligente que solo instala lo que falta
"""

import os
import sys
import subprocess
import shutil
import time
from pathlib import Path
from datetime import datetime
import warnings

warnings.filterwarnings('ignore')

class SistemaVerificadorTolima:
    def __init__(self):
        self.base_dir = Path.cwd()
        self.logs = []
        self.errores_encontrados = []
        self.correcciones_aplicadas = []
        
    def log(self, mensaje, tipo="INFO"):
        """Registra mensaje con timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {tipo}: {mensaje}"
        self.logs.append(log_entry)
        print(log_entry)
        
    def verificar_python(self):
        """Verifica versi√≥n de Python"""
        self.log("üêç Verificando Python...")
        
        version = sys.version_info
        if version.major < 3 or (version.major == 3 and version.minor < 8):
            self.log("‚ùå Python 3.8+ requerido. Versi√≥n actual: {}.{}".format(
                version.major, version.minor), "ERROR")
            self.errores_encontrados.append("Python versi√≥n insuficiente")
            return False
        
        self.log(f"‚úÖ Python {version.major}.{version.minor} OK")
        return True
    
    def verificar_estructura_proyecto(self):
        """Verifica y crea estructura de directorios necesaria"""
        self.log("üìÅ Verificando estructura de proyecto...")
        
        directorios_necesarios = [
            "sql_init",
            "scripts", 
            "data",
            "data/processed",
            "backups",
            "logs",
            "reportes"
        ]
        
        directorios_creados = []
        directorios_existentes = []
        
        for directorio in directorios_necesarios:
            dir_path = self.base_dir / directorio
            if dir_path.exists():
                directorios_existentes.append(directorio)
            else:
                try:
                    dir_path.mkdir(parents=True, exist_ok=True)
                    directorios_creados.append(directorio)
                    self.correcciones_aplicadas.append(f"Directorio creado: {directorio}")
                except Exception as e:
                    self.log(f"‚ùå Error creando {directorio}: {e}", "ERROR")
                    self.errores_encontrados.append(f"No se pudo crear directorio: {directorio}")
                    return False
        
        self.log(f"‚úÖ Directorios existentes: {len(directorios_existentes)}")
        if directorios_creados:
            self.log(f"üìÇ Directorios creados: {directorios_creados}")
        
        return True
    
    def verificar_archivo_env(self):
        """Verifica y crea archivo .env con variables necesarias"""
        self.log("üîê Verificando archivo .env...")
        
        env_file = self.base_dir / ".env"
        variables_necesarias = {
            'ENVIRONMENT': 'development',
            'DB_HOST': 'localhost',
            'DB_PORT': '5432',
            'DB_NAME': 'epidemiologia_tolima',
            'DB_USER': 'tolima_admin',
            'DB_PASSWORD': 'tolima2025',
            'CACHE_TTL': '3600',
            'LOG_LEVEL': 'INFO',
            'SYSTEM_VERSION': '2.0'
        }
        
        variables_existentes = {}
        if env_file.exists():
            try:
                with open(env_file, 'r', encoding='utf-8') as f:
                    for linea in f:
                        linea = linea.strip()
                        if '=' in linea and not linea.startswith('#'):
                            clave, valor = linea.split('=', 1)
                            variables_existentes[clave.strip()] = valor.strip()
                self.log(f"‚úÖ Archivo .env encontrado con {len(variables_existentes)} variables")
            except Exception as e:
                self.log(f"‚ö†Ô∏è Error leyendo .env: {e}", "WARNING")
        
        # Verificar variables faltantes
        variables_faltantes = []
        for var, valor_default in variables_necesarias.items():
            if var not in variables_existentes:
                variables_faltantes.append((var, valor_default))
        
        if variables_faltantes or not env_file.exists():
            self.log(f"üîß Creando/actualizando archivo .env...")
            
            contenido_env = "# Sistema Epidemiol√≥gico Tolima V2.0 - Configuraci√≥n\n"
            contenido_env += f"# Generado/actualizado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            
            # Mantener variables existentes
            for var, valor in variables_existentes.items():
                contenido_env += f"{var}={valor}\n"
            
            # Agregar variables faltantes
            if variables_faltantes:
                contenido_env += "\n# Variables agregadas autom√°ticamente:\n"
                for var, valor in variables_faltantes:
                    contenido_env += f"{var}={valor}\n"
                    self.correcciones_aplicadas.append(f"Variable .env agregada: {var}")
            
            try:
                with open(env_file, 'w', encoding='utf-8') as f:
                    f.write(contenido_env)
                self.log(f"‚úÖ Archivo .env actualizado")
            except Exception as e:
                self.log(f"‚ùå Error escribiendo .env: {e}", "ERROR")
                self.errores_encontrados.append("No se pudo crear/actualizar .env")
                return False
        else:
            self.log(f"‚úÖ Archivo .env completo")
        
        return True
    
    def verificar_docker(self):
        """Verifica instalaci√≥n y estado de Docker"""
        self.log("üê≥ Verificando Docker...")
        
        try:
            # Verificar Docker instalado
            result = subprocess.run(["docker", "--version"], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode != 0:
                self.log("‚ùå Docker no est√° instalado", "ERROR")
                self.errores_encontrados.append("Docker no instalado")
                return False
            
            self.log(f"‚úÖ {result.stdout.strip()}")
            
            # Verificar Docker Compose
            result = subprocess.run(["docker-compose", "--version"], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode != 0:
                self.log("‚ùå Docker Compose no disponible", "ERROR")
                self.errores_encontrados.append("Docker Compose no disponible")
                return False
                
            self.log(f"‚úÖ {result.stdout.strip()}")
            
            # Verificar si Docker daemon est√° corriendo
            result = subprocess.run(["docker", "info"], 
                                  capture_output=True, text=True, timeout=15)
            if result.returncode != 0:
                self.log("‚ö†Ô∏è Docker daemon no est√° corriendo", "WARNING")
                self.log("üí° Iniciar Docker Desktop manualmente")
                return True  # No es error cr√≠tico
            
            self.log("‚úÖ Docker daemon corriendo")
            return True
            
        except subprocess.TimeoutExpired:
            self.log("‚è±Ô∏è Timeout verificando Docker", "WARNING")
            return True
        except FileNotFoundError:
            self.log("‚ùå Docker no encontrado en PATH", "ERROR")
            self.errores_encontrados.append("Docker no encontrado")
            return False
        except Exception as e:
            self.log(f"‚ùå Error verificando Docker: {e}", "ERROR")
            return False
    
    def verificar_docker_compose_yml(self):
        """Verifica y crea archivo docker-compose.yml si no existe"""
        self.log("üìã Verificando docker-compose.yml...")
        
        compose_file = self.base_dir / "docker-compose.yml"
        
        if compose_file.exists():
            self.log("‚úÖ docker-compose.yml encontrado")
            return True
        
        self.log("üîß Creando docker-compose.yml...")
        
        docker_compose_content = """version: '3.8'

services:
  postgres:
    image: postgis/postgis:15-3.3
    container_name: tolima_postgres
    environment:
      POSTGRES_DB: epidemiologia_tolima
      POSTGRES_USER: tolima_admin
      POSTGRES_PASSWORD: tolima2025!
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql_init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tolima_admin -d epidemiologia_tolima"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: tolima_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tolima.gov.co
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    name: tolima_postgres_data
"""
        
        try:
            with open(compose_file, 'w', encoding='utf-8') as f:
                f.write(docker_compose_content)
            self.log("‚úÖ docker-compose.yml creado")
            self.correcciones_aplicadas.append("docker-compose.yml creado")
            return True
        except Exception as e:
            self.log(f"‚ùå Error creando docker-compose.yml: {e}", "ERROR")
            self.errores_encontrados.append("No se pudo crear docker-compose.yml")
            return False
    
    def verificar_requirements_txt(self):
        """Verifica archivo requirements.txt"""
        self.log("üì¶ Verificando requirements.txt...")
        
        req_file = self.base_dir / "requirements.txt"
        
        if req_file.exists():
            try:
                with open(req_file, 'r', encoding='utf-8') as f:
                    contenido = f.read()
                    # Verificar que tenga dependencias m√≠nimas
                    deps_criticas = ['pandas', 'sqlalchemy', 'psycopg2-binary', 'geopandas']
                    deps_encontradas = sum(1 for dep in deps_criticas if dep.lower() in contenido.lower())
                    
                    if deps_encontradas >= 3:
                        self.log(f"‚úÖ requirements.txt v√°lido ({deps_encontradas}/4 deps cr√≠ticas)")
                        return True
                    else:
                        self.log(f"‚ö†Ô∏è requirements.txt incompleto ({deps_encontradas}/4 deps)")
            except Exception as e:
                self.log(f"‚ö†Ô∏è Error leyendo requirements.txt: {e}", "WARNING")
        
        self.log("üîß Creando requirements.txt...")
        
        requirements_content = """# Sistema Epidemiol√≥gico Tolima V2.0 - Dependencias

# Base de datos y conectividad
psycopg2-binary==2.9.7
SQLAlchemy==2.0.21
geoalchemy2==0.14.1

# Procesamiento de datos
pandas==2.1.1
numpy==1.25.2
openpyxl==3.1.2
xlrd==2.0.1

# Datos geoespaciales
geopandas==0.13.2
Shapely==2.0.1
Fiona==1.9.4
pyproj==3.6.0

# Dashboard y visualizaci√≥n
streamlit==1.26.0
plotly==5.16.1
folium==0.14.0
streamlit-folium==0.15.0
matplotlib==3.7.2
seaborn==0.12.2

# Utilidades adicionales
python-dotenv==1.0.0
schedule==1.2.0
tqdm==4.66.1

# Desarrollo y testing
pytest==7.4.2
black==23.7.0
flake8==6.0.0

# Exportaci√≥n de reportes
jinja2==3.1.2
fpdf2==2.7.9
"""
        
        try:
            with open(req_file, 'w', encoding='utf-8') as f:
                f.write(requirements_content)
            self.log("‚úÖ requirements.txt creado")
            self.correcciones_aplicadas.append("requirements.txt creado")
            return True
        except Exception as e:
            self.log(f"‚ùå Error creando requirements.txt: {e}", "ERROR")
            self.errores_encontrados.append("No se pudo crear requirements.txt")
            return False
    
    def verificar_archivos_sql(self):
        """Verifica archivos SQL b√°sicos"""
        self.log("üóÑÔ∏è Verificando archivos SQL...")
        
        sql_dir = self.base_dir / "sql_init"
        archivos_sql_necesarios = {
            "01_extensions.sql": """-- Extensiones necesarias para Sistema Epidemiol√≥gico Tolima
CREATE EXTENSION IF NOT EXISTS postgis;
CREATE EXTENSION IF NOT EXISTS pg_trgm;
CREATE EXTENSION IF NOT EXISTS unaccent;
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

\\echo 'Extensiones PostgreSQL instaladas exitosamente';
""",
            "02_schema.sql": """-- Esquema b√°sico creado por verificador
-- Ver documentaci√≥n completa en repositorio

\\echo 'Esquema b√°sico verificado - usar scripts completos para producci√≥n';
""",
            "03_views.sql": """-- Vistas b√°sicas creadas por verificador  
-- Ver documentaci√≥n completa en repositorio

\\echo 'Vistas b√°sicas verificadas - usar scripts completos para producci√≥n';
"""
        }
        
        archivos_creados = []
        for archivo, contenido in archivos_sql_necesarios.items():
            archivo_path = sql_dir / archivo
            if not archivo_path.exists():
                try:
                    with open(archivo_path, 'w', encoding='utf-8') as f:
                        f.write(contenido)
                    archivos_creados.append(archivo)
                    self.correcciones_aplicadas.append(f"SQL creado: {archivo}")
                except Exception as e:
                    self.log(f"‚ùå Error creando {archivo}: {e}", "ERROR")
                    return False
        
        if archivos_creados:
            self.log(f"‚úÖ Archivos SQL creados: {archivos_creados}")
        else:
            self.log("‚úÖ Archivos SQL existentes")
        
        return True
    
    def verificar_config_py(self):
        """Verifica que config.py existe"""
        self.log("‚öôÔ∏è Verificando config.py...")
        
        config_file = self.base_dir / "config.py"
        
        if config_file.exists():
            self.log("‚úÖ config.py encontrado")
            return True
        else:
            self.log("‚ùå config.py no encontrado", "ERROR")
            self.log("üí° Ejecutar: Crear config.py manualmente o usar template")
            self.errores_encontrados.append("config.py faltante")
            return False
    
    def instalar_dependencias_opcionales(self):
        """Instala dependencias Python si el usuario acepta"""
        self.log("üì¶ ¬øInstalar dependencias Python? (Opcional)")
        
        respuesta = input("   Instalar dependencias ahora? (y/N): ")
        if respuesta.lower() not in ['y', 'yes', 'si', 's√≠']:
            self.log("‚è≠Ô∏è Instalaci√≥n de dependencias omitida")
            return True
        
        try:
            self.log("üì• Instalando dependencias...")
            result = subprocess.run([
                sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                self.log("‚úÖ Dependencias instaladas exitosamente")
                return True
            else:
                self.log(f"‚ö†Ô∏è Error instalando dependencias: {result.stderr}", "WARNING")
                return True  # No es error cr√≠tico
                
        except subprocess.TimeoutExpired:
            self.log("‚è±Ô∏è Timeout instalando dependencias", "WARNING")
            return True
        except Exception as e:
            self.log(f"‚ö†Ô∏è Error instalando dependencias: {e}", "WARNING")
            return True
    
    def setup_completo_desde_cero(self):
        """Opci√≥n alternativa: setup completo desde cero"""
        self.log("üöÄ SETUP COMPLETO DESDE CERO")
        self.log("=" * 40)
        
        confirmacion = input("‚ö†Ô∏è Esto sobrescribir√° archivos existentes. ¬øContinuar? (y/N): ")
        if confirmacion.lower() not in ['y', 'yes', 'si', 's√≠']:
            self.log("‚ùå Setup completo cancelado")
            return False
        
        # Ejecutar todas las verificaciones en modo forzado
        pasos_completos = [
            self.verificar_estructura_proyecto,
            self.verificar_archivo_env,
            self.verificar_requirements_txt,
            self.verificar_docker_compose_yml,
            self.verificar_archivos_sql,
        ]
        
        for paso in pasos_completos:
            if not paso():
                return False
        
        self.instalar_dependencias_opcionales()
        self.log("‚úÖ Setup completo desde cero completado")
        return True
    
    def ejecutar_verificacion_completa(self):
        """Ejecuta verificaci√≥n completa del sistema"""
        inicio = datetime.now()
        
        self.log("üîç VERIFICADOR SISTEMA EPIDEMIOL√ìGICO TOLIMA V2.0")
        self.log("=" * 60)
        self.log("Modo: Verificaci√≥n inteligente (solo corrige lo necesario)")
        
        # Verificaciones en orden de importancia
        verificaciones = [
            ("Python", self.verificar_python),
            ("Estructura proyecto", self.verificar_estructura_proyecto),
            ("Archivo .env", self.verificar_archivo_env),
            ("Docker", self.verificar_docker),
            ("docker-compose.yml", self.verificar_docker_compose_yml),
            ("requirements.txt", self.verificar_requirements_txt),
            ("Archivos SQL", self.verificar_archivos_sql),
            ("config.py", self.verificar_config_py),
        ]
        
        verificaciones_exitosas = 0
        total_verificaciones = len(verificaciones)
        
        for i, (nombre, funcion) in enumerate(verificaciones, 1):
            self.log(f"\nüìã Verificaci√≥n {i}/{total_verificaciones}: {nombre}")
            
            try:
                if funcion():
                    verificaciones_exitosas += 1
                    self.log(f"‚úÖ {nombre} OK")
                else:
                    self.log(f"‚ùå {nombre} con problemas")
            except Exception as e:
                self.log(f"‚ùå Error verificando {nombre}: {e}", "ERROR")
                self.errores_encontrados.append(f"Error en {nombre}")
        
        # Resumen final
        duracion = datetime.now() - inicio
        self.log(f"\n{'='*60}")
        self.log("VERIFICACI√ìN COMPLETADA")
        self.log("=" * 60)
        
        self.log(f"‚úÖ Verificaciones exitosas: {verificaciones_exitosas}/{total_verificaciones}")
        
        if self.correcciones_aplicadas:
            self.log(f"üîß Correcciones aplicadas: {len(self.correcciones_aplicadas)}")
            for correccion in self.correcciones_aplicadas:
                self.log(f"   ‚Ä¢ {correccion}")
        
        if self.errores_encontrados:
            self.log(f"‚ùå Errores encontrados: {len(self.errores_encontrados)}")
            for error in self.errores_encontrados:
                self.log(f"   ‚Ä¢ {error}")
        
        self.log(f"‚è±Ô∏è Tiempo total: {duracion.total_seconds():.1f} segundos")
        
        # Estado final
        if verificaciones_exitosas == total_verificaciones:
            self.log("üéâ ¬°SISTEMA COMPLETAMENTE VERIFICADO!")
            self.log("\nüéØ PR√ìXIMOS PASOS:")
            self.log("1. Colocar archivos de datos en data/")
            self.log("2. Ejecutar: python test_conexion.py")
            self.log("3. Ejecutar: python scripts/sistema_coordinador.py --completo")
            self.log("4. ¬°Sistema epidemiol√≥gico listo! üöÄ")
            return True
        else:
            self.log("‚ö†Ô∏è Sistema verificado con algunas observaciones")
            self.log("üí° Revisar errores reportados arriba")
            return False

def main():
    """Funci√≥n principal con opciones"""
    print("üîç VERIFICADOR SISTEMA EPIDEMIOL√ìGICO TOLIMA V2.0")
    print("=" * 55)
    print("Verifica estructura, configuraci√≥n y dependencias del sistema")
    
    print("\nOpciones disponibles:")
    print("1. üîç Verificaci√≥n inteligente (recomendado)")
    print("2. üöÄ Setup completo desde cero")
    print("3. üëã Salir")
    
    while True:
        try:
            opcion = input("\nüî¢ Selecciona opci√≥n (1-3): ").strip()
            
            if opcion == "1":
                verificador = SistemaVerificadorTolima()
                exito = verificador.ejecutar_verificacion_completa()
                break
            elif opcion == "2":
                verificador = SistemaVerificadorTolima()
                exito = verificador.setup_completo_desde_cero()
                break
            elif opcion == "3":
                print("üëã ¬°Hasta luego!")
                return True
            else:
                print("‚ùå Opci√≥n inv√°lida. Usa 1, 2 o 3.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Saliendo...")
            return True
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    return exito

if __name__ == "__main__":
    main()