#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
setup_sistema.py - Instalaci√≥n Autom√°tica Sistema Epidemiol√≥gico Tolima V2.0
Script actualizado que usa configuraci√≥n centralizada
"""

import os
import sys
import subprocess
import shutil
import time
from pathlib import Path
from datetime import datetime
import urllib.request
import zipfile

class SistemaInstallerV2:
    def __init__(self):
        self.base_dir = Path.cwd()
        self.logs = []
        self.success = True
        
    def log(self, mensaje, tipo="INFO"):
        """Registra mensaje con timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {tipo}: {mensaje}"
        self.logs.append(log_entry)
        print(log_entry)
        
    def verificar_python(self):
        """Verifica versi√≥n de Python"""
        self.log("üêç Verificando Python...")
        
        version = sys.version_info
        if version.major < 3 or (version.major == 3 and version.minor < 8):
            self.log("‚ùå Python 3.8+ requerido. Versi√≥n actual: {}.{}".format(
                version.major, version.minor), "ERROR")
            return False
        
        self.log(f"‚úÖ Python {version.major}.{version.minor} OK")
        return True
    
    def verificar_docker(self):
        """Verifica instalaci√≥n de Docker"""
        self.log("üê≥ Verificando Docker...")
        
        try:
            # Verificar Docker
            result = subprocess.run(["docker", "--version"], 
                                  capture_output=True, text=True)
            if result.returncode != 0:
                self.log("‚ùå Docker no est√° instalado", "ERROR")
                self.log("üí° Instalar desde: https://www.docker.com/products/docker-desktop")
                return False
            
            self.log(f"‚úÖ {result.stdout.strip()}")
            
            # Verificar Docker Compose
            result = subprocess.run(["docker-compose", "--version"], 
                                  capture_output=True, text=True)
            if result.returncode != 0:
                self.log("‚ùå Docker Compose no est√° disponible", "ERROR")
                return False
                
            self.log(f"‚úÖ {result.stdout.strip()}")
            return True
            
        except FileNotFoundError:
            self.log("‚ùå Docker no encontrado en PATH", "ERROR")
            return False
    
    def crear_estructura_proyecto(self):
        """Crea estructura de directorios del proyecto"""
        self.log("üìÅ Creando estructura de proyecto V2.0...")
        
        directorios = [
            "sql_init",
            "scripts", 
            "data",
            "data/processed",
            "dashboard",
            "dashboard/pages",
            "dashboard/utils",
            "backups",
            "logs",
            "reportes"
        ]
        
        for directorio in directorios:
            dir_path = self.base_dir / directorio
            dir_path.mkdir(parents=True, exist_ok=True)
            self.log(f"   üìÇ {directorio}")
        
        return True
    
    def instalar_dependencias_python(self):
        """Instala dependencias Python actualizadas"""
        self.log("üì¶ Instalando dependencias Python V2.0...")
        
        # Requirements actualizado para V2.0
        requirements_content = """# Sistema Epidemiol√≥gico Tolima V2.0 - Dependencias
# Base de datos y conectividad
psycopg2-binary==2.9.7
SQLAlchemy==2.0.21
geoalchemy2==0.14.1

# Procesamiento de datos
pandas==2.1.1
numpy==1.25.2
openpyxl==3.1.2
xlrd==2.0.1
python-dateutil==2.8.2

# Datos geoespaciales (NUEVOS para .gpkg)
geopandas==0.13.2
Shapely==2.0.1
Fiona==1.9.4
pyproj==3.6.0

# Dashboard y visualizaci√≥n
streamlit==1.26.0
plotly==5.16.1
folium==0.14.0
streamlit-folium==0.15.0
matplotlib==3.7.2
seaborn==0.12.2

# Utilidades adicionales
python-dotenv==1.0.0
schedule==1.2.0
tqdm==4.66.1
pathlib==1.0.1

# Desarrollo y testing
pytest==7.4.2
black==23.7.0
flake8==6.0.0

# Exportaci√≥n de reportes
jinja2==3.1.2
fpdf==2.7.4
"""
        
        requirements_file = self.base_dir / "requirements.txt"
        with open(requirements_file, 'w', encoding='utf-8') as f:
            f.write(requirements_content)
        self.log("‚úÖ requirements.txt V2.0 creado")
        
        try:
            # Instalar dependencias
            self.log("   üì• Instalando paquetes...")
            result = subprocess.run([
                sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode != 0:
                self.log(f"‚ùå Error instalando dependencias: {result.stderr}", "ERROR")
                return False
            
            self.log("‚úÖ Dependencias V2.0 instaladas exitosamente")
            return True
            
        except subprocess.TimeoutExpired:
            self.log("‚ùå Timeout instalando dependencias", "ERROR")
            return False
        except Exception as e:
            self.log(f"‚ùå Error inesperado: {e}", "ERROR")
            return False
    
    def crear_archivo_configuracion_v2(self):
        """Crea archivo de configuraci√≥n centralizada V2.0"""
        self.log("‚öôÔ∏è Creando configuraci√≥n centralizada V2.0...")
        
        config_content = '''#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
config.py - Configuraci√≥n Centralizada Sistema Epidemiol√≥gico Tolima V2.0
GENERADO AUTOM√ÅTICAMENTE POR SETUP
"""

import os
import pandas as pd
import geopandas as gpd
from pathlib import Path
from dotenv import load_dotenv
from datetime import datetime, date
from dateutil.relativedelta import relativedelta

load_dotenv()

# ================================
# CONFIGURACI√ìN GRUPOS ETARIOS
# ================================
GRUPOS_ETARIOS = {
    '09-23 meses': (9, 23),
    '02-19 a√±os': (24, 239), 
    '20-59 a√±os': (240, 719),
    '60+ a√±os': (720, None)
}

def clasificar_grupo_etario(edad_meses):
    """Funci√≥n √∫nica de clasificaci√≥n de grupos etarios"""
    if pd.isna(edad_meses):
        return 'Sin datos'
    
    for grupo, (min_meses, max_meses) in GRUPOS_ETARIOS.items():
        if max_meses is None:
            if edad_meses >= min_meses:
                return grupo
        else:
            if min_meses <= edad_meses <= max_meses:
                return grupo
    return None

# ================================ 
# CONFIGURACI√ìN BASE DE DATOS
# ================================
class DatabaseConfig:
    HOST = os.getenv("DB_HOST", "localhost")
    PORT = os.getenv("DB_PORT", "5432")
    DATABASE = os.getenv("DB_NAME", "epidemiologia_tolima")
    USER = os.getenv("DB_USER", "tolima_admin")
    PASSWORD = os.getenv("DB_PASSWORD", "tolima2025!")
    
    @classmethod
    def get_connection_url(cls):
        return f"postgresql://{cls.USER}:{cls.PASSWORD}@{cls.HOST}:{cls.PORT}/{cls.DATABASE}"

# ================================
# RUTAS DE ARCHIVOS
# ================================
class FileConfig:
    BASE_DIR = Path(__file__).parent
    DATA_DIR = BASE_DIR / "data"
    LOGS_DIR = BASE_DIR / "logs"
    BACKUPS_DIR = BASE_DIR / "backups"
    
    @classmethod
    def create_directories(cls):
        for directory in [cls.DATA_DIR, cls.LOGS_DIR, cls.BACKUPS_DIR]:
            directory.mkdir(parents=True, exist_ok=True)

# Variables globales
DATABASE_URL = DatabaseConfig.get_connection_url()

# ================================
# FUNCIONES DE UTILIDAD B√ÅSICAS
# ================================
def limpiar_fecha_robusta(fecha_input):
    """Limpia fechas en m√∫ltiples formatos"""
    if pd.isna(fecha_input):
        return None
    try:
        if isinstance(fecha_input, (datetime, pd.Timestamp)):
            return fecha_input.date()
        
        fecha_str = str(fecha_input).strip()
        if " " in fecha_str:
            fecha_str = fecha_str.split(" ")[0]
        
        formatos = ["%d/%m/%Y", "%d-%m-%Y", "%Y-%m-%d", "%m/%d/%Y"]
        for formato in formatos:
            try:
                return datetime.strptime(fecha_str, formato).date()
            except:
                continue
        return pd.to_datetime(fecha_str, dayfirst=True).date()
    except:
        return None

if __name__ == "__main__":
    print("‚öôÔ∏è Configuraci√≥n Sistema Epidemiol√≥gico Tolima V2.0")
    FileConfig.create_directories()
    print("‚úÖ Sistema configurado correctamente")
'''
        
        config_file = self.base_dir / "config.py"
        with open(config_file, 'w', encoding='utf-8') as f:
            f.write(config_content)
        
        self.log("‚úÖ config.py V2.0 creado")
        return True
    
    def crear_archivos_docker(self):
        """Crea archivos de configuraci√≥n Docker"""
        self.log("üê≥ Creando configuraci√≥n Docker...")
        
        # Docker Compose actualizado
        docker_compose_content = """version: '3.8'

services:
  postgres:
    image: postgis/postgis:15-3.3
    container_name: tolima_postgres
    environment:
      POSTGRES_DB: epidemiologia_tolima
      POSTGRES_USER: tolima_admin
      POSTGRES_PASSWORD: tolima2025!
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql_init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tolima_admin -d epidemiologia_tolima"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: tolima_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tolima.gov.co
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    name: tolima_postgres_data
"""
        
        docker_file = self.base_dir / "docker-compose.yml"
        with open(docker_file, 'w', encoding='utf-8') as f:
            f.write(docker_compose_content)
        
        self.log("‚úÖ docker-compose.yml creado")
        return True
    
    def crear_archivos_sql(self):
        """Crea archivos SQL de inicializaci√≥n"""
        self.log("üóÑÔ∏è Creando scripts SQL...")
        
        # Extensions SQL
        extensions_sql = """-- Extensiones necesarias para V2.0
CREATE EXTENSION IF NOT EXISTS postgis;
CREATE EXTENSION IF NOT EXISTS pg_trgm;
CREATE EXTENSION IF NOT EXISTS unaccent;
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

\\echo 'Extensiones PostgreSQL V2.0 instaladas exitosamente';
"""
        
        sql_dir = self.base_dir / "sql_init"
        sql_dir.mkdir(exist_ok=True)
        
        extensions_file = sql_dir / "01_extensions.sql"
        with open(extensions_file, 'w', encoding='utf-8') as f:
            f.write(extensions_sql)
        
        self.log("‚úÖ Scripts SQL b√°sicos creados")
        return True
    
    def crear_archivo_env(self):
        """Crea archivo .env de configuraci√≥n"""
        self.log("üîê Creando archivo de configuraci√≥n .env...")
        
        env_content = """# Sistema Epidemiol√≥gico Tolima V2.0 - Configuraci√≥n
ENVIRONMENT=development

# Base de Datos PostgreSQL
DB_HOST=localhost
DB_PORT=5432
DB_NAME=epidemiologia_tolima
DB_USER=tolima_admin
DB_PASSWORD=tolima2025!

# Dashboard
CACHE_TTL=3600

# Logging
LOG_LEVEL=INFO

# Sistema V2.0
SYSTEM_VERSION=2.0
"""
        
        env_file = self.base_dir / ".env"
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        self.log("‚úÖ Archivo .env creado")
        return True
    
    def iniciar_docker(self):
        """Inicia servicios Docker"""
        self.log("üöÄ Iniciando servicios Docker...")
        
        try:
            # Iniciar servicios
            result = subprocess.run([
                "docker-compose", "up", "-d"
            ], capture_output=True, text=True, timeout=180)
            
            if result.returncode != 0:
                self.log(f"‚ùå Error iniciando Docker: {result.stderr}", "ERROR")
                return False
            
            self.log("‚úÖ Servicios Docker iniciados")
            
            # Esperar PostgreSQL
            self.log("‚è≥ Esperando PostgreSQL...")
            time.sleep(15)
            
            # Verificar PostgreSQL
            result = subprocess.run([
                "docker", "exec", "tolima_postgres", 
                "pg_isready", "-U", "tolima_admin"
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                self.log("‚úÖ PostgreSQL listo")
                return True
            else:
                self.log("‚ö†Ô∏è PostgreSQL a√∫n iniciando... (normal)", "WARNING") 
                return True
                
        except subprocess.TimeoutExpired:
            self.log("‚è≥ Docker tomando m√°s tiempo del esperado", "WARNING")
            return True
        except Exception as e:
            self.log(f"‚ùå Error con Docker: {e}", "ERROR")
            return False
    
    def crear_script_test_v2(self):
        """Crea script de prueba V2.0"""
        self.log("üß™ Creando script de prueba V2.0...")
        
        test_script_content = """#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
test_conexion.py - Prueba Sistema Epidemiol√≥gico V2.0
'''

import sys
import warnings
warnings.filterwarnings('ignore')

try:
    # Importar configuraci√≥n centralizada
    from config import DATABASE_URL, FileConfig, DatabaseConfig
    print("‚úÖ Configuraci√≥n centralizada importada correctamente")
    
    # Probar dependencias principales
    import pandas as pd
    import geopandas as gpd
    import psycopg2
    from sqlalchemy import create_engine, text
    print("‚úÖ Todas las dependencias importadas correctamente")
    
    # Crear directorios
    FileConfig.create_directories()
    print("‚úÖ Estructura de directorios verificada")
    
    # Probar conexi√≥n BD
    try:
        engine = create_engine(DATABASE_URL)
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        print("‚úÖ Conexi√≥n PostgreSQL exitosa")
        
    except Exception as e:
        print(f"‚ö†Ô∏è PostgreSQL no disponible a√∫n: {e}")
        print("üí° Espera 30-60 segundos e intenta de nuevo")
        
    print("\\nüéâ ¬°Sistema Epidemiol√≥gico Tolima V2.0 instalado correctamente!")
    print("üìã Pr√≥ximos pasos:")
    print("1. Colocar archivos de datos en carpeta 'data/'")
    print("2. Ejecutar: python scripts/sistema_coordinador.py --completo")
    print("3. ¬°Usar sistema completo! üöÄ")
        
except ImportError as e:
    print(f"‚ùå Error importando dependencias: {e}")
    print("üí° Ejecutar: pip install -r requirements.txt")
    sys.exit(1)
except Exception as e:
    print(f"‚ùå Error inesperado: {e}")
    sys.exit(1)
"""
        
        test_file = self.base_dir / "test_conexion.py"
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_script_content)
        
        self.log("‚úÖ Script de prueba V2.0 creado")
        return True
    
    def generar_readme_v2(self):
        """Genera README V2.0 con instrucciones"""
        self.log("üìù Generando documentaci√≥n V2.0...")
        
        readme_content = f"""# üè• Sistema Epidemiol√≥gico Tolima V2.0

Sistema de vigilancia epidemiol√≥gica con **configuraci√≥n centralizada** instalado autom√°ticamente.

## ‚úÖ Instalaci√≥n Completada

La instalaci√≥n autom√°tica V2.0 se complet√≥ el {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}.

## üÜï Novedades V2.0
- ‚úÖ **Configuraci√≥n centralizada** en config.py
- ‚úÖ **Mapeo autom√°tico DIVIPOLA** desde .gpkg
- ‚úÖ **Scripts integrados** y optimizados
- ‚úÖ **Validaciones robustas** de datos
- ‚úÖ **Sistema coordinador** inteligente

## üöÄ Inicio R√°pido

### 1. Verificar Instalaci√≥n
```bash
python test_conexion.py
```

### 2. Colocar Archivos de Datos
Copia tus archivos en `data/`:
- `poblacion_veredas.csv` (CSV SISBEN sin headers)
- `paiweb.xlsx` (datos vacunaci√≥n) 
- `casos.xlsx` (casos fiebre amarilla)
- `epizootias.xlsx` (epizootias con coordenadas)
- `tolima_cabeceras_veredas.gpkg` (**OBLIGATORIO** para c√≥digos DIVIPOLA)

### 3. Actualizaci√≥n Completa Autom√°tica
```bash
python scripts/sistema_coordinador.py --completo
```

### 4. Monitoreo del Sistema
```bash
python scripts/monitor_sistema.py --completo
```

## üõ†Ô∏è Herramientas Disponibles
- **PostgreSQL**: localhost:5432
- **pgAdmin**: http://localhost:8080 (admin@tolima.gov.co / admin123)
- **Scripts**: carpeta scripts/ con todos los procesadores
- **Monitor**: sistema de alertas epidemiol√≥gicas

## üìã Scripts Principales
- `sistema_coordinador.py` - Coordinador maestro (RECOMENDADO)
- `cargar_poblacion.py` - Poblaci√≥n SISBEN integrada
- `cargar_vacunacion.py` - Vacunaci√≥n PAIweb
- `cargar_casos.py` - Casos fiebre amarilla
- `cargar_epizootias.py` - Epizootias geoespaciales
- `monitor_sistema.py` - Monitor avanzado

## üìû Soluci√≥n de Problemas

### PostgreSQL no responde
```bash
docker-compose down && docker-compose up -d
# Esperar 30-60 segundos
python test_conexion.py
```

### Error en scripts
```bash
# Ver logs detallados
python scripts/monitor_sistema.py --completo
```

## üéØ ¬°Sistema V2.0 Listo!
Tu sistema epidemiol√≥gico est√° completamente instalado y configurado.

**¬°Vigilancia epidemiol√≥gica automatizada para Tolima! üöÄ**
"""
        
        readme_file = self.base_dir / "README.md"
        with open(readme_file, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        self.log("‚úÖ README.md V2.0 creado")
        return True
    
    def ejecutar_instalacion_completa(self):
        """Ejecuta instalaci√≥n completa V2.0 del sistema"""
        self.log("üöÄ INICIANDO INSTALACI√ìN SISTEMA EPIDEMIOL√ìGICO V2.0")
        self.log("=" * 70)
        
        pasos = [
            ("Python", self.verificar_python),
            ("Docker", self.verificar_docker), 
            ("Estructura", self.crear_estructura_proyecto),
            ("Config V2.0", self.crear_archivo_configuracion_v2),
            ("Dependencias", self.instalar_dependencias_python),
            ("Docker Config", self.crear_archivos_docker),
            ("SQL Scripts", self.crear_archivos_sql),
            ("Archivo .env", self.crear_archivo_env),
            ("Servicios Docker", self.iniciar_docker),
            ("Script Test V2.0", self.crear_script_test_v2),
            ("Documentaci√≥n V2.0", self.generar_readme_v2)
        ]
        
        pasos_exitosos = 0
        total_pasos = len(pasos)
        
        for i, (nombre, funcion) in enumerate(pasos, 1):
            self.log(f"\\nüìã Paso {i}/{total_pasos}: {nombre}")
            
            try:
                if funcion():
                    pasos_exitosos += 1
                    self.log(f"‚úÖ {nombre} completado")
                else:
                    self.log(f"‚ùå {nombre} fall√≥", "ERROR")
                    self.success = False
            except Exception as e:
                self.log(f"‚ùå Error en {nombre}: {e}", "ERROR")
                self.success = False
        
        # Resumen final
        self.log(f"\\n{'='*70}")
        self.log("INSTALACI√ìN V2.0 COMPLETADA")
        self.log("=" * 70)
        
        if self.success:
            self.log("üéâ ¬°INSTALACI√ìN V2.0 EXITOSA!")
            self.log(f"‚úÖ {pasos_exitosos}/{total_pasos} pasos completados")
            self.log("\\nüéØ PR√ìXIMOS PASOS:")
            self.log("1. Ejecutar: python test_conexion.py")
            self.log("2. Colocar archivos de datos en 'data/' (incluyendo .gpkg)")
            self.log("3. Ejecutar: python scripts/sistema_coordinador.py --completo")
            self.log("4. ¬°Sistema V2.0 funcionando! üöÄ")
        else:
            self.log(f"‚ö†Ô∏è Instalaci√≥n V2.0 completada con errores")
            self.log(f"‚úÖ {pasos_exitosos}/{total_pasos} pasos completados")
        
        return self.success

def main():
    """Funci√≥n principal"""
    print("üè• INSTALADOR AUTOM√ÅTICO SISTEMA EPIDEMIOL√ìGICO V2.0")
    print("=" * 65)
    print("Sistema con configuraci√≥n centralizada y mapeo autom√°tico DIVIPOLA")
    print("Tiempo estimado: 5-10 minutos")
    
    respuesta = input("\\n¬øContinuar con la instalaci√≥n V2.0? (y/N): ")
    if respuesta.lower() not in ['y', 'yes', 'si', 's√≠']:
        print("üëã Instalaci√≥n cancelada")
        return
    
    installer = SistemaInstallerV2()
    exito = installer.ejecutar_instalacion_completa()
    
    if exito:
        print(f"\\nüéâ ¬°SISTEMA V2.0 INSTALADO EXITOSAMENTE!")
        print("üìã Ver README.md para instrucciones completas")
        print("üöÄ ¬°Listo para vigilancia epidemiol√≥gica automatizada!")
    else:
        print(f"\\n‚ö†Ô∏è Instalaci√≥n con errores. Ver log para detalles.")
    
    return exito

if __name__ == "__main__":
    main()